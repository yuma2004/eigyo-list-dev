name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # 毎日午前2時にテスト実行（UTCなので注意）
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.7.1'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_eigyo_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./backend
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      working-directory: ./backend
      run: poetry install --no-interaction
    
    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_eigyo_db" >> .env.test
        echo "TESTING=true" >> .env.test
    
    - name: Run linting
      working-directory: ./backend
      run: |
        poetry run black --check app tests
        poetry run isort --check-only app tests
        poetry run flake8 app tests
        poetry run mypy app
    
    - name: Run unit tests
      working-directory: ./backend
      run: |
        poetry run pytest tests/test_*.py -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_eigyo_db
        TESTING: true
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        poetry run pytest tests/test_integration_*.py -v --maxfail=5
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_eigyo_db
        TESTING: true
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        poetry run pytest tests/test_performance_*.py -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_eigyo_db
        TESTING: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: |
        npm run lint
        npm run typecheck
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage
    
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: poetry install --no-interaction
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
    
    - name: Set up E2E test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.e2e
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/e2e_test_db" >> .env.e2e
        echo "TESTING=true" >> .env.e2e
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_test_db
        TESTING: true
    
    - name: Build and start frontend
      working-directory: ./frontend
      run: |
        npm run build
        npm run preview -- --port 3000 --host &
        sleep 10
      env:
        VITE_API_BASE_URL: http://localhost:8000
    
    - name: Wait for services
      run: |
        npx wait-on http://localhost:8000/health http://localhost:3000 --timeout 60000
    
    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 7

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run npm audit (Frontend)
      working-directory: ./frontend
      run: |
        npm ci
        npm audit --audit-level moderate
    
    - name: Run safety check (Backend)
      working-directory: ./backend
      run: |
        pip install safety
        safety check

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarQube needs full history
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend && pip install poetry && poetry install
        cd ../frontend && npm ci
    
    - name: Run SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Deployment (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.REGISTRY_URL }}/eigyo-list-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.REGISTRY_URL }}/eigyo-list-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # デプロイメントスクリプトを実行
        # kubectl apply -f k8s/ --set image.tag=${{ github.sha }}
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # ステージング環境でのスモークテスト実行
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "営業リスト作成ツール デプロイ完了",
            attachments: [{
              color: "good",
              fields: [{
                title: "Branch",
                value: "${{ github.ref_name }}",
                short: true
              }, {
                title: "Commit",
                value: "${{ github.sha }}",
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Nightly Tests
  nightly-tests:
    runs-on: ubuntu-latest
    if: github.event.schedule
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        echo "Setting up nightly test environment..."
    
    - name: Run extended test suite
      run: |
        echo "Running extended nightly tests..."
        # 夜間の詳細テスト実行
    
    - name: Generate test report
      run: |
        echo "Generating nightly test report..."
        # テストレポート生成
    
    - name: Send nightly report
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "営業リスト作成ツール 夜間テスト完了",
            attachments: [{
              color: "${{ job.status == 'success' && 'good' || 'danger' }}",
              fields: [{
                title: "Status",
                value: "${{ job.status }}",
                short: true
              }, {
                title: "Date",
                value: "${{ github.event.head_commit.timestamp }}",
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()